<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://nullpointer-excelsior.github.io/</id><title>Nullpointer Excelsior</title><subtitle>Ingeniería de software aplicada, tips, buenas práctias y códigos </subtitle> <updated>2025-02-19T10:23:47-03:00</updated> <author> <name>Benjamin</name> <uri>https://nullpointer-excelsior.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://nullpointer-excelsior.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="es-ES" href="https://nullpointer-excelsior.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2025 Benjamin </rights> <icon>//assets/img/favicons/favicon.ico</icon> <logo>//assets/img/favicons/favicon-96x96.png</logo> <entry><title>Reseña del Libro Enterprise Integration Patterns</title><link href="https://nullpointer-excelsior.github.io/posts/resena-del-libro-enterprise-integration-patterns/" rel="alternate" type="text/html" title="Reseña del Libro Enterprise Integration Patterns" /><published>2025-02-18T02:00:00-03:00</published> <updated>2025-02-18T02:00:00-03:00</updated> <id>https://nullpointer-excelsior.github.io/posts/resena-del-libro-enterprise-integration-patterns/</id> <content src="https://nullpointer-excelsior.github.io/posts/resena-del-libro-enterprise-integration-patterns/" /> <author> <name>Benjamin</name> </author> <category term="Microservicios" /> <category term="Software" /> <category term="Architecture" /> <summary> Resumen General Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions es un libro escrito en 2003 por Gregor Hohpe y Bobby Woolf que explora cómo integrar soluciones empresariales utilizando mensajería. En su contexto original, las soluciones tecnológicas se centraban en una estrategia conjunta entre la infraestructura y la lógica de negocio, con actores prin... </summary> </entry> <entry><title>¿Qué es CQRS y cómo funciona? Con un ejemplo práctico.</title><link href="https://nullpointer-excelsior.github.io/posts/que-es-cqrs-y-como-funciona-con-un-ejemplo-practico/" rel="alternate" type="text/html" title="¿Qué es CQRS y cómo funciona? Con un ejemplo práctico." /><published>2025-02-04T02:00:00-03:00</published> <updated>2025-02-04T02:00:00-03:00</updated> <id>https://nullpointer-excelsior.github.io/posts/que-es-cqrs-y-como-funciona-con-un-ejemplo-practico/</id> <content src="https://nullpointer-excelsior.github.io/posts/que-es-cqrs-y-como-funciona-con-un-ejemplo-practico/" /> <author> <name>Benjamin</name> </author> <category term="Java" /> <category term="Architecture" /> <category term="Coding" /> <category term="Backend" /> <category term="Fullstack" /> <summary> ¿Qué es CQRS y qué problema soluciona? CQRS (Command Query Responsibility Segregation) es un patrón arquitectónico que separa las operaciones de lectura y escritura en una aplicación. En lugar de usar un solo modelo para ambas tareas, CQRS define modelos independientes: uno para procesar comandos (modificaciones de datos) y otro para ejecutar consultas (lectura de datos). Escalabilidad de a... </summary> </entry> <entry><title>¿Qué es y cómo funciona el Event Sourcing con un ejemplo práctico?</title><link href="https://nullpointer-excelsior.github.io/posts/que-es-y-como-funciona-el-event-sourcing-con-un-ejemplo-practico/" rel="alternate" type="text/html" title="¿Qué es y cómo funciona el Event Sourcing con un ejemplo práctico?" /><published>2025-01-28T02:00:00-03:00</published> <updated>2025-01-28T02:00:00-03:00</updated> <id>https://nullpointer-excelsior.github.io/posts/que-es-y-como-funciona-el-event-sourcing-con-un-ejemplo-practico/</id> <content src="https://nullpointer-excelsior.github.io/posts/que-es-y-como-funciona-el-event-sourcing-con-un-ejemplo-practico/" /> <author> <name>Benjamin</name> </author> <category term="Java" /> <category term="Architecture" /> <category term="Coding" /> <category term="Backend" /> <category term="Fullstack" /> <category term="Microservices" /> <summary> ¿Qué es Event Sourcing? Event Sourcing es un patrón de arquitectura de software que trata cada cambio en el estado de una aplicación como un evento. En lugar de almacenar el estado actual de un objeto, se almacenan los eventos que han ocurrido, los cuales se pueden reproducir para recrear el estado del objeto en cualquier momento. Esto permite tener un historial completo de las transacciones... </summary> </entry> <entry><title>Integración de arquitectura hexagonal en Spring</title><link href="https://nullpointer-excelsior.github.io/posts/integracion-de-arquitectura-hexagonal-en-spring/" rel="alternate" type="text/html" title="Integración de arquitectura hexagonal en Spring" /><published>2024-08-29T01:00:00-04:00</published> <updated>2024-08-29T01:00:00-04:00</updated> <id>https://nullpointer-excelsior.github.io/posts/integracion-de-arquitectura-hexagonal-en-spring/</id> <content src="https://nullpointer-excelsior.github.io/posts/integracion-de-arquitectura-hexagonal-en-spring/" /> <author> <name>Benjamin</name> </author> <category term="Arquitectura,Arquitectura" /> <category term="Software,Spring,Microservicios,Backend" /> <summary> La arquitectura hexagonal busca separar el dominio de las implementaciones tecnológicas. El modelado de dominio se puede hacer mediante DDD, pero no es obligatorio. Sin embargo, hay patrones muy útiles que pueden ayudarte a crear un código más mantenible. RECUERDA: el diseño y la aplicación de patrones o ciertas arquitecturas dependerán del problema que quieres solucionar y si este aporta va... </summary> </entry> <entry><title>Backend for Frontend pattern</title><link href="https://nullpointer-excelsior.github.io/posts/backend-for-frontend-pattern/" rel="alternate" type="text/html" title="Backend for Frontend pattern" /><published>2024-06-24T01:00:00-04:00</published> <updated>2024-06-24T01:00:00-04:00</updated> <id>https://nullpointer-excelsior.github.io/posts/backend-for-frontend-pattern/</id> <content src="https://nullpointer-excelsior.github.io/posts/backend-for-frontend-pattern/" /> <author> <name>Benjamin</name> </author> <category term="Backend,Frontend,GraphQL,Software" /> <category term="Engineer" /> <summary> Cuando optamos por una arquitectura basada en microservicios, hemos dividido un sistema complejo en pequeñas partes independientes y con responsabilidades definidas. A su vez, surge la necesidad de gestionar el acceso y consumo de los microservicios que hemos desarrollado. Para lograrlo, podemos hacer uso del patrón BFF (Backend for Frontend). La idea es similar a la de un api gateway, un com... </summary> </entry> </feed>
